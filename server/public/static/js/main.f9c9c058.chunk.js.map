{"version":3,"sources":["CreateTable.js","services/server_communication.js","SubmitPage.js","FormWizard.js","index.js"],"names":["CreateTable","props","forms","map","item","i","key","name","noSubmissions","to","baseUrl","readAll","axios","get","then","response","data","catch","error","console","log","read","id","create","form","post","patch","request","createImpl","formImpl","SubmitPage","useState","values","fields","handleValueChange","event","onSubmit","preventDefault","target","value","formName","Object","keys","type","inputType","onChange","withRouter","setFields","newLabel","setNewLabel","newName","setNewName","newInputType","setNewInputType","newFormName","setNewFormName","formId","setFormId","field","label","concat","Comms","setForms","history","push","ReactDOM","render","useEffect","padding","createBrowserHistory","addFormArr","style","path","match","params","_id","document","getElementById"],"mappings":"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","file":"static/js/main.f9c9c058.chunk.js","sourcesContent":["//desiging the table\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CreateTable = (props) => {\r\n    const getTableRows = () => {\r\n        return props.forms.map((item, i) => {\r\n            return (\r\n                <tbody key={i}>\r\n                    <tr>\r\n                            <td>{i}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.noSubmissions}</td>\r\n                            <td><Link to={`/submit/${i}`}>View</Link></td>\r\n                            <td><Link to={`/submissions/${i}`}>View</Link></td>\r\n                    </tr>\r\n                </tbody>\r\n            )\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Form Id</th>\r\n                        <th>Form Name</th>\r\n                        <th># Submissions</th>\r\n                        <th>Submit Page</th>\r\n                        <th>Submissions Page</th>\r\n                    </tr>\r\n                </thead>\r\n                {getTableRows()}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateTable","  \r\nimport axios from 'axios'\r\n\r\nconst baseUrl = 'http://localhost:3001'\r\n\r\nfunction readAll() {\r\n  return (\r\n    axios.get(`${baseUrl}/forms`)\r\n      .then(response => response.data)\r\n      .catch(error => console.log(error))\r\n  )\r\n}\r\n\r\nfunction read(id='') {\r\n    return (\r\n      axios.get(`${baseUrl}/forms/${id}`)\r\n        .then(response => response.data)\r\n        .catch(error => console.log(error))\r\n    )\r\n  }\r\n\r\nfunction create(form) {\r\n  return (\r\n    axios.post(`${baseUrl}/forms`, form)\r\n      .then(response => response.data)\r\n      // .catch(error => error)\r\n  )\r\n}\r\n\r\nfunction patch(form) {\r\n  console.log(form)\r\n  return (\r\n    axios.patch(`${baseUrl}/${form.id}`, form)\r\n      .then(request => request.data)\r\n      // .catch(error => console.log(error))\r\n  )\r\n}\r\n\r\nfunction createImpl(formImpl){\r\n  return(\r\n    axios.post(`${baseUrl}/formImpls/`)\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error))\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default {readAll, read, create, patch, createImpl}","import React, { useState } from 'react'\r\nimport Comms from './services/server_communication.js'\r\n\r\nconst SubmitPage = (props) => {\r\n    const [values, setValues] = useState([''])\r\n    const [inputFields, setInputFields] = useState(props.fields)\r\n    const [count, setCount] = useState(0)\r\n    const formImpl = {}\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        console.log(event.target.value)\r\n        \r\n        const formImpl = {\r\n            id: 5,\r\n            name: \"dfsdf\",\r\n            phone: \"sdfdf\",\r\n            originId: props.id\r\n        }\r\n\r\n        // Comms.createImpl(formImpl)\r\n        // .then((formImpl) => {\r\n        //     console.log(formImpl)\r\n        // }).catch(error => console.log(error))   \r\n    }\r\n\r\n    const handleValueChange = (event) => {\r\n        //setValues(values[count]=event.target.value)\r\n    }\r\n    //adding key\r\n    return( \r\n        <form onSubmit={handleSubmit}>\r\n            <h1>{props.formName}</h1>\r\n                {Object.keys(props.fields).map((item, i) => {\r\n                    return (\r\n                            <input key={i} type={props.fields[i].inputType} value={values[i]} onChange={handleValueChange}/>\r\n                    )\r\n                })}\r\n                <button type=\"submit\">Save</button>\r\n          </form>\r\n    )\r\n\r\n}\r\n\r\nexport default SubmitPage","import React, { useState } from 'react'\r\nimport {\r\n  withRouter\r\n} from 'react-router-dom'\r\n\r\nimport Comms from './services/server_communication.js'\r\n\r\nconst FormWizard = (props) => {\r\n  const [fields, setFields] = useState([])\r\n  //const [fieldSet, setSet] = useState(new Set())\r\n  const [newLabel, setNewLabel] = useState('')\r\n  const [newName, setNewName] = useState('')\r\n  const [newInputType, setNewInputType] = useState('')\r\n  const [newFormName, setNewFormName] = useState('')\r\n  const [formId, setFormId] = useState(1)\r\n\r\n  // useEffect(() => {\r\n  //     props.setForms(props.forms)\r\n  // }, [props.forms])\r\n\r\n  const addField = (event) => {\r\n    event.preventDefault() // Why? Ask Or\r\n    // if(fieldSet.has(newLabel))\r\n    //    return alert(`${newLabel} is already in exist`) ASK OR\r\n\r\n    const field = { name: newName, label: newLabel, inputType: newInputType || 'text' }\r\n    console.log(newLabel)\r\n    setFields(fields.concat(field))\r\n    //setSet(field.label)\r\n    setNewName('')\r\n    setNewLabel('')\r\n    setNewInputType('')\r\n  }\r\n\r\n  const addForm = (event) => {\r\n    event.preventDefault()\r\n    const form = {\r\n      name: newFormName,\r\n      fields: fields,\r\n      // id: formId,\r\n      noSubmissions: 0\r\n    }\r\n\r\n    Comms.create(form)\r\n      .then((form) => {\r\n        console.log(form)\r\n        props.setForms(props.forms.concat(form))\r\n      }).catch(error => console.log(error))\r\n    setNewFormName('')\r\n    setFields([])\r\n    setFormId(formId + 1)\r\n    props.history.push('/table')\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  const handleLabelChange = (event) => {\r\n    setNewLabel(event.target.value)\r\n  }\r\n  const handleInputTypeChange = (event) => {\r\n    setNewInputType(event.target.value)\r\n  }\r\n  const handleFormNameChange = (event) => {\r\n    setNewFormName(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Add new field</h1>\r\n      <form onSubmit={addField}>\r\n        <div>\r\n                    field label:<input type=\"text\" value={newLabel} onChange={handleLabelChange}></input>\r\n                    input name:<input type=\"text\" value={newName} onChange={handleNameChange}></input>\r\n                    input type:<select value={newInputType} onChange={handleInputTypeChange}>\r\n            <option value=\"text\">text</option>\r\n            <option value=\"color\">color</option>\r\n            <option value=\"date\">date</option>\r\n            <option value=\"email\">email</option>\r\n            <option value=\"tel\">telephone</option>\r\n            <option value=\"number\">number</option>\r\n          </select>\r\n          <br></br>\r\n          <button type=\"submit\">Add Field</button>\r\n        </div>\r\n      </form>\r\n      <ul>\r\n        {fields.map((item, i) => <li key={i}>{item.label} {item.name} {item.inputType}</li>)}\r\n      </ul>\r\n\r\n      <form onSubmit={addForm}>\r\n        <div>\r\n                    Form Name:<input value={newFormName} onChange={handleFormNameChange}></input>\r\n          <br></br>\r\n          <button type=\"submit\">Save</button>\r\n        </div>\r\n      </form>            </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(FormWizard)","import React, { useState, useEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route, Link\r\n} from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\n\r\nimport CreateTable from './CreateTable.js'\r\nimport Comms from './services/server_communication.js'\r\nimport SubmitPage from './SubmitPage'\r\nimport FormWizard from './FormWizard'\r\n\r\nconst App = () => {\r\n  const [forms, setForms] = useState([])\r\n\r\n\r\n  useEffect(() => {\r\n    Comms.readAll()\r\n      .then((forms) => {\r\n        setForms(forms)\r\n      })\r\n      .catch(error => console.log(error))\r\n  }, [])\r\n\r\n  const padding = { padding: 5 }\r\n\r\n  const history = createBrowserHistory()\r\n\r\n  // const FormWizard= (props) => {\r\n  //     const addField = (event) => {\r\n  //         event.preventDefault() //Why? Ask Or\r\n  //         //if(fieldSet.has(newLabel))\r\n  //         //    return alert(`${newLabel} is already in exist`) ASK OR\r\n\r\n  //         const field = { name: newName, label: newLabel, inputType: newInputType, }\r\n  //         console.log(newLabel)\r\n  //         setFields(fields.concat(field))\r\n  //         setSet(field.label)\r\n  //         setNewName('')\r\n  //         setNewLabel('')\r\n  //         setNewInputType('')\r\n  //     }\r\n\r\n  //     const addForm = (event) => {\r\n\r\n  //         event.preventDefault()\r\n  //         const form = {\r\n  //             name: newFormName,\r\n  //             fields: fields,\r\n  //             id: formId,\r\n  //             noSubmissions: 0,\r\n  //         }\r\n\r\n  //         Comms.create(form)\r\n  //             .then((form) => {\r\n  //                 console.log(form)\r\n  //                 setForms(forms.concat(form))\r\n  //             }).catch(error => console.log(error))\r\n  //         setForms(forms.concat(form))\r\n  //         setNewFormName('')\r\n  //         setFields([])\r\n  //         setFormId(formId + 1)\r\n  //         props.history.push(\"/table\")\r\n  //     }\r\n\r\n  //     const handleNameChange = (event) => {\r\n  //         setNewName(event.target.value)\r\n  //     }\r\n  //     const handleLabelChange = (event) => {\r\n  //         setNewLabel(event.target.value)\r\n  //     }\r\n  //     const handleInputTypeChange = (event) => {\r\n  //         setNewInputType(event.target.value)\r\n  //     }\r\n  //     const handleFormNameChange = (event) => {\r\n  //         setNewFormName(event.target.value)\r\n  //     }\r\n\r\n  //     return (\r\n  //         <div>\r\n  //             <h1>Add new field</h1>\r\n  //             <form onSubmit={addField}>\r\n  //                 <div>\r\n  //                     field label:<input type=\"text\" value={newLabel} onChange={handleLabelChange}></input>\r\n  //                     input name:<input type=\"text\" value={newName} onChange={handleNameChange}></input>\r\n  //                     input type:<select value={newInputType} onChange={handleInputTypeChange}>\r\n  //                         <option value=\"text\">text</option>\r\n  //                         <option value=\"color\">color</option>\r\n  //                         <option value=\"date\">date</option>\r\n  //                         <option value=\"email\">email</option>\r\n  //                         <option value=\"tel\">telephone</option>\r\n  //                         <option value=\"number\">number</option>\r\n  //                     </select>\r\n  //                     <br></br>\r\n  //                     <button type=\"submit\">Add Field</button>\r\n  //                 </div>\r\n  //             </form>\r\n  //             <ul>\r\n  //                 {fields.map((item, i) => <li key={i}>{item.label} {item.name} {item.inputType}</li>)}\r\n  //             </ul>\r\n\r\n  //             <form onSubmit={addForm}>\r\n  //                 <div>\r\n  //                     Form Name:<input value={newFormName} onChange={handleFormNameChange}></input>\r\n  //                     <br></br>\r\n  //                     <button type=\"submit\">Save</button>\r\n  //                 </div>\r\n  //             </form>            </div>\r\n  //     )\r\n  // }\r\n\r\n  function addFormArr (form) {\r\n    setForms(forms.concat(form))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Router history={history}>\r\n        <div>\r\n          <Link style={padding} to=\"/table\">Form List</Link>|\r\n          <Link style={padding} to=\"/wizard\">Form Builder</Link>\r\n          <Route path=\"/table\" render={() => <CreateTable forms={forms}/>}/>\r\n          <Route path=\"/wizard\" render={() => <FormWizard forms={forms} setForms={addFormArr}/>}/>\r\n          <Route path=\"/submit/:id\" render={({ match }) => <SubmitPage fields={forms[match.params.id].fields}\r\n                                              formName={forms[match.params.id].name}  id={forms[match.params.id]._id}/>}/>\r\n        </div>\r\n      </Router>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}